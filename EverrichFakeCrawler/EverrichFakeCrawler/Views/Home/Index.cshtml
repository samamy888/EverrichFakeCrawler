@{
    ViewData["Title"] = "Home Page";
}
<div id="app" class="tab-wrapper">
    <el-card :body-style="cardStyle">
        <el-form :model="addForm" :rules="rules" status-icon ref="addForm">
            <h1 class="title fadeInDown">昇恆昌反詐騙</h1>
            <el-form-item class="d-flex jcc" label="搜尋" prop="keyword">
                <el-input v-model="addForm.keyword" placeholder="關鍵字" clearable></el-input>
            </el-form-item>
            <el-form-item class="d-flex jcc" label="帳號" prop="accountId">
                <el-input v-model="addForm.accountId" placeholder="FB帳號" clearable></el-input>
            </el-form-item>
            <el-form-item class="d-flex jcc" label="密碼" prop="password">
                <el-input v-model="addForm.password" show-password placeholder="FB密碼"></el-input>
            </el-form-item>
            <el-form-item class="text-center">
                <el-button id="doCrawlerButton" class="btn add-btn" type="primary" @@click="doCrawler()">開始爬取</el-button>
            </el-form-item>
        </el-form>
    </el-card>
</div>


@section Scripts{
    <script>
        const validate = (rule, value, callback) => {
            if (value === '') {
                callback(new Error('不可為空值'));
            } else {
                callback();
            }
        }

        const data = {
            cardStyle: { 'background-color': '#e4e7ed' },
            addForm: {
                keyword: '',
                accountId: '',
                password: '',
                reLogin: true,
            },

            rules: {
                keyword: [{ validator: validate, trigger: 'blur' }],
                accountId: [{ validator: validate, trigger: 'blur' }],
                password: [{ validator: validate, trigger: 'blur' }]
            }
        }

        const methods = {
            doCrawler() {
                var formName = 'addForm'
                this.$refs[formName].validate((valid) => {
                    if (!valid) {
                        this.showError('新增失敗');
                        return false;
                    }
                    this.saveLocalStorage();
                    this.PostCrawler();
                });
            },
            PostCrawler() {
                axios({
                    url: '/Crawler',
                    method: 'Post',
                    responseType: 'blob', // important
                    data: this.addForm
                })
                    .then((response) => {
                        vm.showSuccess('爬取完成');
                        // create file link in browser's memory
                        const href = URL.createObjectURL(response.data);
                        // create "a" HTML element with href to file & click
                        const link = document.createElement('a');
                        link.href = href;
                        link.setAttribute('download', 'Everrich爬蟲.xlsx'); //or any other extension
                        document.body.appendChild(link);
                        link.click();

                        // clean up "a" element & remove ObjectURL
                        document.body.removeChild(link);
                        URL.revokeObjectURL(href);
                    })
                    .catch(({ response }) => {
                        vm.showError(response.data);
                    });
            },
            saveLocalStorage() {
                if (this.addForm.accountId === localStorage.crawler_account && this.addForm.password === localStorage.crawler_password) {
                    this.addForm.reLogin = false;
                }
                localStorage.setItem('crawler_account', this.addForm.accountId)
                localStorage.setItem('crawler_password', this.addForm.password)
                localStorage.setItem('crawler_keyword', this.addForm.keyword)
            },
            showSuccess(message) {
                this.$message({
                    message: message,
                    type: 'success'
                });
            },
            showError(message) {
                this.$message.error(message);
            },
        }
        const mounted = function() {
            this.addForm.accountId = localStorage.crawler_account ?? ''
            this.addForm.password = localStorage.crawler_password ?? ''
            this.addForm.keyword = localStorage.crawler_keyword ?? ''
        }
        const vue = {
            el: '#app',
            data: data,
            methods: methods,
            mounted: mounted,
        }
        const vm = new Vue(vue)
    </script>
}

